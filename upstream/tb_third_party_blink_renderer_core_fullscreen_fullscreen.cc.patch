diff --git tb/third_party/blink/renderer/core/fullscreen/fullscreen.cc tb_diff/third_party/blink/renderer/core/fullscreen/fullscreen.cc
--- tb/third_party/blink/renderer/core/fullscreen/fullscreen.cc
+++ tb_diff/third_party/blink/renderer/core/fullscreen/fullscreen.cc
@@ -565,6 +565,25 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
                                             RequestType request_type,
                                             ScriptState* script_state,
                                             ExceptionState* exception_state) {
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled()) {
+    auto* video_element = pending.QuerySelector("video");
+    if (video_element) {
+      DynamicTo<HTMLMediaElement>(video_element)->Play();
+      return RequestFullscreen(options, *video_element, request_type,
+                               script_state, exception_state);
+    }
+  }
+  return RequestFullscreen(options, pending, request_type, script_state,
+                           exception_state);
+}
+
+ScriptPromise Fullscreen::RequestFullscreen(const FullscreenOptions* options,
+                                            Element& pending,
+                                            RequestType request_type,
+                                            ScriptState* script_state,
+                                            ExceptionState* exception_state) {
+#endif
   RequestFullscreenScope scope;
 
   // 1. Let |pending| be the context object.
@@ -633,6 +652,12 @@ ScriptPromise Fullscreen::RequestFullscreen(Element& pending,
     LocalFrame& frame = *window.GetFrame();
     frame.GetChromeClient().EnterFullscreen(frame, options,
                                             for_cross_process_descendant);
+#if defined(ENABLE_TRIPLE_BANANA)
+    if (RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+        IsA<HTMLVideoElement>(pending)) {
+      From(window).media_dispatcher_->OnEnteredVideoFullscreen();
+    }
+#endif
 
     // After the first fullscreen request, the user activation should be
     // consumed, and the following fullscreen requests should receive an error.
@@ -810,6 +835,17 @@ ScriptPromise Fullscreen::ExitFullscreen(Document& doc,
     return ScriptPromise();
   }
 
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (!ua_originated && RuntimeEnabledFeatures::MediaRemoteEnabled() &&
+      IsA<HTMLVideoElement>(FullscreenElementFrom(doc))) {
+    if (exception_state) {
+      exception_state->ThrowDOMException(DOMExceptionCode::kNotAllowedError,
+                                         "Unable to exit fullscreen");
+    }
+    return ScriptPromise();
+  }
+#endif
+
   if (script_state)
     resolver = MakeGarbageCollected<ScriptPromiseResolver>(script_state);
 
@@ -882,6 +918,11 @@ void Fullscreen::DidExitFullscreen(Document& document) {
   // If this is a response to an ExitFullscreen call then
   // continue exiting. Otherwise call FullyExitFullscreen.
   Fullscreen& fullscreen = From(*document.domWindow());
+#if defined(ENABLE_TRIPLE_BANANA)
+  if (RuntimeEnabledFeatures::MediaRemoteEnabled()) {
+    fullscreen.media_dispatcher_->OnExitedVideoFullscreen();
+  }
+#endif
   PendingExits exits;
   exits.swap(fullscreen.pending_exits_);
   if (exits.IsEmpty()) {
