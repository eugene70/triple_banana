diff --git tb/components/password_manager/core/browser/password_save_manager_impl.cc tb_diff/components/password_manager/core/browser/password_save_manager_impl.cc
--- tb/components/password_manager/core/browser/password_save_manager_impl.cc
+++ tb_diff/components/password_manager/core/browser/password_save_manager_impl.cc
@@ -19,6 +19,12 @@
 #include "components/password_manager/core/browser/votes_uploader.h"
 #include "components/password_manager/core/common/password_manager_features.h"
 
+#if defined(ENABLE_TRIPLE_BANANA)
+#include "base/strings/string_number_conversions.h"
+#include "base/strings/utf_string_conversions.h"
+#include "crypto/sha2.h"
+#endif
+
 using autofill::FormData;
 using autofill::FormFieldData;
 using autofill::FormStructure;
@@ -155,6 +161,24 @@ void PasswordSaveManagerImpl::CreatePendingCredentials(
     if (pending_credentials_.password_value != password_to_save.first) {
       pending_credentials_state_ = PendingCredentialsState::UPDATE;
       votes_uploader_->set_password_overridden(true);
+#if defined(ENABLE_TRIPLE_BANANA)
+      const std::string hashed_new_password =
+          crypto::SHA256HashString(base::UTF16ToUTF8(password_to_save.first));
+      encrypter_->GetEncryptedDataFromCipherText(
+          base::UTF16ToUTF8(pending_credentials_.password_value),
+          base::BindOnce(
+              [](PasswordSaveManagerImpl* password_save_manager,
+                 const std::string& hashed_new_password,
+                 encrypter::mojom::EncryptedDataPtr encrypted_data) {
+                if (hashed_new_password == encrypted_data->hashed_text) {
+                  password_save_manager->pending_credentials_state_ =
+                      PendingCredentialsState::NONE;
+                }
+              },
+              this,
+              base::ToLowerASCII(base::HexEncode(hashed_new_password.c_str(),
+                                                 hashed_new_password.size()))));
+#endif
     } else if (pending_credentials_.is_public_suffix_match) {
       // If the autofilled credentials were a PSL match, store a copy with the
       // current origin and signon realm. This ensures that on the next visit, a
