diff --git triple_banana/components/subresource_filter/core/browser/subresource_filter_features.cc triple_banana_change/components/subresource_filter/core/browser/subresource_filter_features.cc
index 6e2b5e1..03d05231 100644
--- triple_banana/components/subresource_filter/core/browser/subresource_filter_features.cc
+++ triple_banana_change/components/subresource_filter/core/browser/subresource_filter_features.cc
@@ -53,6 +53,7 @@ class CommaSeparatedStrings {
   DISALLOW_COPY_AND_ASSIGN(CommaSeparatedStrings);
 };
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 std::string TakeVariationParamOrReturnEmpty(
     std::map<std::string, std::string>* params,
     const std::string& key) {
@@ -113,9 +114,14 @@ int ParseInt(const base::StringPiece value) {
   base::StringToInt(value, &result);
   return result;
 }
+#endif
 
+#if defined(ENABLE_TRIPLE_BANANA)
+std::vector<Configuration> FillEnabledPresetConfigurations() {
+#else
 std::vector<Configuration> FillEnabledPresetConfigurations(
     std::map<std::string, std::string>* params) {
+#endif
   // If ad tagging is enabled, turn on the dryrun automatically.
   bool ad_tagging_enabled = base::FeatureList::IsEnabled(kAdTagging);
   const struct {
@@ -130,16 +136,22 @@ std::vector<Configuration> FillEnabledPresetConfigurations(
       {kPresetLiveRunForBetterAds, true,
        &Configuration::MakePresetForLiveRunForBetterAds}};
 
+#if !defined(ENABLE_TRIPLE_BANANA)
   CommaSeparatedStrings enabled_presets(
       TakeVariationParamOrReturnEmpty(params, kEnablePresetsParameterName));
   CommaSeparatedStrings disabled_presets(
       TakeVariationParamOrReturnEmpty(params, kDisablePresetsParameterName));
+#endif
 
   std::vector<Configuration> enabled_configurations;
   for (const auto& available_preset : kAvailablePresetConfigurations) {
+#if defined(ENABLE_TRIPLE_BANANA)
+    if (available_preset.enabled_by_default) {
+#else
     if ((enabled_presets.CaseInsensitiveContains(available_preset.name) ||
          available_preset.enabled_by_default) &&
         !disabled_presets.CaseInsensitiveContains(available_preset.name)) {
+#endif
       enabled_configurations.push_back(available_preset.factory_method());
     }
   }
@@ -147,6 +159,7 @@ std::vector<Configuration> FillEnabledPresetConfigurations(
   return enabled_configurations;
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 Configuration ParseExperimentalConfiguration(
     std::map<std::string, std::string>* params) {
   Configuration configuration;
@@ -176,8 +189,14 @@ Configuration ParseExperimentalConfiguration(
 
   return configuration;
 }
+#endif
 
 std::vector<Configuration> ParseEnabledConfigurations() {
+#if defined(ENABLE_TRIPLE_BANANA)
+  std::vector<Configuration> configs;
+  if (base::FeatureList::IsEnabled(kSafeBrowsingSubresourceFilter))
+    configs = FillEnabledPresetConfigurations();
+#else
   std::map<std::string, std::string> params;
   base::GetFieldTrialParamsByFeature(kSafeBrowsingSubresourceFilter, &params);
 
@@ -187,6 +206,7 @@ std::vector<Configuration> ParseEnabledConfigurations() {
 
   Configuration experimental_config = ParseExperimentalConfiguration(&params);
   configs.push_back(std::move(experimental_config));
+#endif
 
   return configs;
 }
