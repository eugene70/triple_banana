diff --git triple_banana/components/autofill/content/renderer/password_autofill_agent.cc triple_banana_change/components/autofill/content/renderer/password_autofill_agent.cc
index 2a5bc31..3879342 100644
--- triple_banana/components/autofill/content/renderer/password_autofill_agent.cc
+++ triple_banana_change/components/autofill/content/renderer/password_autofill_agent.cc
@@ -295,6 +295,7 @@ bool IsElementEditable(const WebInputElement& element) {
   return element.IsEnabled() && !element.IsReadOnly();
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 bool DoUsernamesMatch(const base::string16& potential_suggestion,
                       const base::string16& current_username,
                       bool exact_match) {
@@ -303,6 +304,7 @@ bool DoUsernamesMatch(const base::string16& potential_suggestion,
   return !exact_match && IsPrefixOfEmailEndingWithAtSign(current_username,
                                                          potential_suggestion);
 }
+#endif
 
 // Returns whether the |username_element| is allowed to be autofilled.
 //
@@ -351,6 +353,7 @@ bool CanShowSuggestion(const PasswordFormFillData& fill_data,
   return false;
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 // This function attempts to find the matching credentials for the
 // |current_username| by scanning |fill_data|. The result is written in
 // |username| and |password| parameters.
@@ -426,6 +429,7 @@ bool IsPublicSuffixDomainMatch(const std::string& url1,
   return gurl1.scheme() == gurl2.scheme() && domain1 == domain2 &&
          gurl1.port() == gurl2.port();
 }
+#endif
 
 // Helper function that calculates form signature for |password_form| and
 // returns it as WebString.
@@ -565,6 +569,7 @@ WebInputElement ConvertToWebInput(const WebFormControlElement& element) {
   return input ? *input : WebInputElement();
 }
 
+#if !defined(ENABLE_TRIPLE_BANANA)
 // Returns true if |element|'s frame origin is not PSL matched with the origin
 // of any parent frame.
 bool IsInCrossOriginIframe(const WebInputElement& element) {
@@ -583,6 +588,7 @@ bool IsInCrossOriginIframe(const WebInputElement& element) {
   }
   return false;
 }
+#endif
 
 }  // namespace
 
@@ -1761,6 +1767,9 @@ bool PasswordAutofillAgent::FillUserNameAndPassword(
     WebInputElement password_element,
     const PasswordFormFillData& fill_data,
     RendererSavePasswordProgressLogger* logger) {
+#if defined(ENABLE_TRIPLE_BANANA)
+  return false;
+#else
   if (logger)
     logger->LogMessage(Logger::STRING_FILL_USERNAME_AND_PASSWORD_METHOD);
 
@@ -1883,6 +1892,7 @@ bool PasswordAutofillAgent::FillUserNameAndPassword(
 
   LogFirstFillingResult(fill_data, FillingResult::kSuccess);
   return true;
+#endif
 }
 
 void PasswordAutofillAgent::LogPrefilledUsernameFillOutcome(
