diff --git triple_banana/components/autofill/content/renderer/password_autofill_agent.cc triple_banana_change/components/autofill/content/renderer/password_autofill_agent.cc
index a61ea84..e19d662 100644
--- triple_banana/components/autofill/content/renderer/password_autofill_agent.cc
+++ triple_banana_change/components/autofill/content/renderer/password_autofill_agent.cc
@@ -296,6 +296,7 @@ bool IsElementEditable(const WebInputElement& element) {
   return element.IsEnabled() && !element.IsReadOnly();
 }
 
+#if 0
 bool DoUsernamesMatch(const base::string16& potential_suggestion,
                       const base::string16& current_username,
                       bool exact_match) {
@@ -304,6 +305,7 @@ bool DoUsernamesMatch(const base::string16& potential_suggestion,
   return !exact_match && IsPrefixOfEmailEndingWithAtSign(current_username,
                                                          potential_suggestion);
 }
+#endif
 
 // Returns whether the given |element| is editable.
 bool IsElementAutocompletable(const WebInputElement& element) {
@@ -358,6 +360,7 @@ bool CanShowSuggestion(const PasswordFormFillData& fill_data,
   return false;
 }
 
+#if 0
 // This function attempts to find the matching credentials for the
 // |current_username| by scanning |fill_data|. The result is written in
 // |username| and |password| parameters.
@@ -396,6 +399,7 @@ void FindMatchesByUsername(const PasswordFormFillData& fill_data,
     }
   }
 }
+#endif
 
 // TODO(crbug.com/564578): This duplicates code from
 // components/password_manager/core/browser/psl_matching_helper.h. The logic
@@ -1716,6 +1720,9 @@ bool PasswordAutofillAgent::FillUserNameAndPassword(
     bool username_may_use_prefilled_placeholder,
     FieldDataManager* field_data_manager,
     RendererSavePasswordProgressLogger* logger) {
+#if 1
+  return false;
+#elif 0
   if (logger)
     logger->LogMessage(Logger::STRING_FILL_USERNAME_AND_PASSWORD_METHOD);
 
@@ -1845,6 +1852,7 @@ bool PasswordAutofillAgent::FillUserNameAndPassword(
       WebString::FromUTF16(password));
   LogFirstFillingResult(fill_data, FillingResult::kSuccess);
   return true;
+#endif
 }
 
 void PasswordAutofillAgent::LogPrefilledUsernameFillOutcome(
